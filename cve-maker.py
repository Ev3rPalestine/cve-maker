#!/usr/bin/env python3

__description__ = 'Tool to detect, find, compile and execute a CVE on the current or a remote machine.'
__author__ = 'msd0pe'
__version__ = '2.2'
__date__ = '2020/02/22'

"""
https://github.com/msd0pe-1
Source code put in public domain by msd0pe, no Copyright
Any malicious or illegal activity may be punishable by law
Use at your own risk
"""

"""
CHANGELOG:
        2020/02/22 : V2.2 - Customize your exploit + fix bug.
	2019/12/30 : V2.1 - Sending a remote exploit is now automated + auto detecting the compilation / usage options.
	2019/09/14 : V2.0 - Remote exploitation is now possible.
	2019/08/03 : V1.3.2 - Upgrading to Python 3.7, optimizing Detect option & detecting payloads langages.
	2019/07/05 : V1.3.1 - Optimization of the Search and Detect options.
	2019/06/28 : V1.3 - Adding the Searching option.
	2019/06/28 : V1.2 - Adding the EDB Check option.
	2019/06/25 : V1.1 - Adding the Detection option.
	2019/06/23 : V1.0 - Project Start.
"""

class bcolors:
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    OCRA = '\033[93m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class infos:
    INFO = "[" + bcolors.OCRA + bcolors.BOLD + "?" + bcolors.ENDC + bcolors.ENDC + "] "
    ERROR = "[" + bcolors.RED + bcolors.BOLD + "X" + bcolors.ENDC + bcolors.ENDC + "] "
    GOOD = "[" + bcolors.GREEN + bcolors.BOLD + "+" + bcolors.ENDC + bcolors.ENDC + "] "
    PROCESS = "[" + bcolors.BLUE + bcolors.BOLD + "*" + bcolors.ENDC + bcolors.ENDC + "] "

try:
    import optparse
    from functions import info as info
    from functions import detect as detect
    from functions import remote as remote
    from functions import payloads as payloads

except ImportError:
    print("\n" + infos.ERROR + "Error. Have you installed the requirements properly?")
    print(infos.INFO + "Be sure to run the script as follows:")
    print(infos.INFO + "python3 cve-maker.py ....")
    print(infos.INFO + "./cve-maker.py ....\n")

def Main():
    Menu = optparse.OptionParser(usage='python %prog [options] site', version='%prog ' + __version__)
    Menu.add_option('-d', '--detect', action="store_true", dest="detect", help='detect vulnerabilities on the current machine')
    Menu.add_option('-i', '--check', action="store_true", dest="check", help='check if the edb-id is verified')
    Menu.add_option('-r', '--remote', action="store_true", dest="remote", help='attack a target remotely')
    Menu.add_option('-f', '--find', type="str", dest="find", help='looking for an exploit by its vulnerable software')
    Menu.add_option('-c', '--cve', type="str", dest="cve", help='looks for the CVE from its name')
    Menu.add_option('-e', '--edb', type="str", dest="edb", help='looks for the CVE from its EDB-ID')
    Menu.add_option('-l', '--lang', type="str", dest="lang", help='langage of the exploit. [Default: c]')
    (options, args) = Menu.parse_args()

    Sites = optparse.OptionGroup(Menu, "Available 0day sites", "exploit_db\n")
    Menu.add_option_group(Sites)

    Langages = optparse.OptionGroup(Menu, "Langages", "sh\n ruby\n perl\n python\n php\n c++\n c\n")
    Menu.add_option_group(Langages)

    Examples = optparse.OptionGroup(Menu, "Examples", """python cve-maker.py -f "Apache 2.4" exploit_db
                                                         python cve-maker.py -e 12345 -l ruby exploit_db
                                                         python cve-maker.py -c 2019-98765 -l c++ -r exploit_db""")
    Menu.add_option_group(Examples) 

    sites = {"exploit_db"}
     
    if len(args) != 1:
        Menu.print_help()
        print('')
        print('  %s' % __description__)
        print('  Source code put in public domain by ' + bcolors.PURPLE + bcolors.BOLD + 'msd0pe' + bcolors.ENDC + bcolors.ENDC + ',' + bcolors.RED + bcolors.BOLD + 'no Copyright' + bcolors.ENDC + bcolors.ENDC)
        print('  Any malicious or illegal activity may be punishable by law')
        print('  Use at your own risk')

    elif len(args) == 1:
        site = args[0]
        if site in sites:
            try:

                if options.cve != None and options.lang == None:
                    print("\n" + infos.ERROR + "You must specify the langage of the CVE !\n")    
                    exit()  
                elif options.edb != None and options.lang == None:
                    print("\n" + infos.ERROR + "You must specify the langage of the CVE !\n")
                    exit()
                else:
                    pass

                if options.remote == True:
                    detect.SearchExploit(options.find, options.check)
                    payloads.CreateDirectory()
                    payloads.FindCVE(site, options.cve, options.edb, options.lang)
                    detect.DetectCompilationOptions(payloads.payload, payloads.name, payloads.name_ext, options.lang, True)
                    payloads.WritePayload(payloads.payload, payloads.name_ext, options.lang)
                    payloads.CustomizePayload(payloads.name_ext)
                    payloads.Compilation(payloads.name, detect.command, options.lang, True)
                    remote.Menu(options.remote, payloads.name, payloads.name_ext, options.lang, detect.command, detect.usage, payloads.name)

                else:
                    detect.SearchExploit(options.find, options.check)
                    detect.DetectCVE(site, options.detect, options.check)
                    payloads.CreateDirectory()
                    payloads.FindCVE(site, options.cve, options.edb, options.lang)
                    detect.DetectCompilationOptions(payloads.payload, payloads.name, payloads.name_ext, options.lang, None)
                    payloads.WritePayload(payloads.payload, payloads.name_ext, options.lang)
                    payloads.CustomizePayload(payloads.name_ext)
                    payloads.Compilation(payloads.name, detect.command, options.lang, None)
                    payloads.Execute(payloads.name, payloads.name_ext, options.lang, detect.usage)

            except NameError:
                if options.cve == None and options.edb == None and options.detect == None and options.check == None and options.find == None and options.remote == None:
                    print("\n" + infos.ERROR + "You must specify a CVE-NAME or a EDB-ID !\n")                 
                elif options.check == True and options.detect == None and options.find == None:
                    print("\n" + infos.ERROR + "Don't forget the '-d' or '-f' option !\n")
                elif options.remote == True and options.cve == None and options.edb == None and options.lang == None:
                    print("\n" + infos.ERROR + "Don't forget the '-e', '-l' or '-c' option for the remote machine !\n")
                else:
                     pass

            except AttributeError:
                if options.remote == True and options.find != None:
                    print("\n" + infos.ERROR + "The remote option couldn't be use with the find option !\n")

        else:
            Menu.print_help()
            print('')
            print('  %s' % __description__)
            print('  Source code put in public domain by ' + bcolors.PURPLE + bcolors.BOLD + 'msd0pe' + bcolors.ENDC + bcolors.ENDC + ',' + bcolors.RED + bcolors.BOLD + 'no Copyright' + bcolors.ENDC + bcolors.ENDC)
            print('  Any malicious or illegal activity may be punishable by law')
            print('  Use at your own risk')

if __name__ == '__main__':
    Main()
